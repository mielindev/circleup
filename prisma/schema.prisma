// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  name String?
  bio String?
  image String?
  location String?
  websites String[]
  email String @unique
  userName String @unique
  clerkId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  post Post[]
  comments Comment[]
  likes Like[]

  followers Follows[] @relation("following")
  following Follows[] @relation("follower")

  notifications Notification[] @relation("userNotification")
  notificationsCreated Notification[] @relation("notificationsCreator")
}

model Post {
  id String @id @default(cuid())
  authorId String
  content String?
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes Like[]
  notifications Notification[]

  @@index([createdAt])
  @@index([authorId, createdAt])
}

model Comment {
  id String @id @default(cuid())
  content String
  authorId String
  postId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]
  @@index([authorId, postId])
}

model Like {
  id String @id @default(cuid())
  userId String
  postId String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId, postId]) // composite index for faster queries
  @@unique([userId, postId]) // this prevents user from liking the same post twice
}

model Follows {
  followerId String
  followingId String
  createdAt DateTime @default(now())

  // Relations
  follower User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId, followingId])
  @@unique([followerId, followingId])
}

model Notification {
  id String @id @default(cuid())
  userId String
  creatorId String
  type NotificationType
  read Boolean @default(false)
  postId String?
  commentId String?
  createdAt DateTime @default(now())

  // Relations
  user User @relation("userNotification", fields: [userId], references: [id], onDelete: Cascade)
  creator User @relation("notificationsCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post Post? @relation(fields: [postId], references: [id], onDelete: SetNull)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}